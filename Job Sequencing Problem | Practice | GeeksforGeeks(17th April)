# GFG-DAILY-PROBLEM



class Solution 
{
    public:
    static bool func(Job a,Job b)
    {
        if(a.dead<b.dead)
        {
            return true;
        }
        
        return false;
    }
    
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        sort(arr,arr+n,func);
        
        priority_queue<int, vector<int>, greater<int> > st;
        
        for(int i=0;i<n;i++)
        {
            if(arr[i].dead==st.size())
            {
                if(st.top()<arr[i].profit)
                {
                    st.pop();
                    st.push(arr[i].profit);
                }
            }
            else if(arr[i].dead>=st.size())
            {
                st.push(arr[i].profit);
            }
        }
        
        int ans_=0;
        
        int m= st.size();
        
        while(!st.empty())
        {
            ans_ += st.top();
            st.pop();
        }
        
        vector<int> ans={m,ans_};
        
        return ans;
    } 
};


BY:Abhay Gupta
